//- helper functions (Jade mixins)

//- Create an option and potentially set its selected state (if the form has
//- state) for a selection input type.
//-
//- param label     The text label to use
//- param form_var  The variable used to determine selected state
mixin select_option( label, form_var )
  option( value= label, selected= form_var === label ? true : false )= label

//- Produce an error label (styled text) for a form input field
//-
//- This is used to produce a matching error near the appropriate input field
//- when the server-side validation fails, as opposed to simply dumping all the
//- errors in a single spot (i.e.: top of form) and potentially forcing the
//- end-user to scroll up and down to fix each error.
//-
//- param input_field The err string object used to compare equality against
//-                   the errors object.
mixin check_err( input_field )
  if locals.form_helpers.has_err( locals.notifications, input_field )
    div( class='err' )
      img(style='padding-right: 8px;', src='/images/error_16.png', alt='Error Icon')
      = input_field

extends layout

block title

  title= locals.settings.nav_links['contact'].title + ' : ' + locals.settings.site_owner['company']

block head

block content

  unless locals.form_helpers.has_errs( locals.notifications )
    :markdown
      <h1 class='heading1 align-text-center'>
        How can we <span class='bold sky-blue'>help you?</span>
      </h1>

  unless locals.form_helpers.has_errs( locals.notifications )

    main
      p If you are seeking skilled and diligent representation in any type of case, contact Laura today to see how she may be able to help you.

    //- :markdown
      <h1 class='heading2 align-text-center'>
        ...Via <span class='bold sky-blue'>Phone</span> or <span class='bold sky-blue'>Stop By</span>
      </h1>

    //- include contact_info

    //- :markdown
      <h1 class='heading2 align-text-center'>
        ...or by <span class='bold sky-blue'>Web</span> Form
      </h1>

  if locals.form_helpers.has_errs( locals.notifications )
    img(class='float-left', src='/images/alert.png', alt='Alert Icon')
    span(class='sans')
      p= locals.form_helpers.count_errs( locals.notifications ) + ' submission errors have been found.'

  unless locals.form_helpers.has_errs( locals.notifications )
    span(class='sans', style='font-size: 80%;')
      :markdown
        <strong>Note:</strong>
        Labels marked with <span class='req'>*</span> indicates required information.

  div(class='contact_form float-left-reset')

    //- TODO: Finish HTML5 hooks for custom client-side validation
    form(action='contact', method='POST',novalidate)
      div(class='input_container')
        fieldset
          legend Your Personal Information

          div(class='label padding-top-offset20')
            +check_err(input_errs['first_name'])
            label(for='contact_first_name') First Name
            span(class='req') *
          input(id='contact_first_name', class= locals.form_helpers.class_selector( locals.notifications, input_errs['first_name'] ), type='text', name='contact[first_name]', spellcheck='false', required data-required-msg= input_errs['first_name'], placeholder='First name', value= contact['first_name'], maxlength=255 )

          div(class='label padding-top-offset20')
            +check_err(input_errs['last_name'])
            label(for='contact_last_name') Last Name
            span(class='req') *
          input(id='contact_last_name', class= locals.form_helpers.class_selector( locals.notifications, input_errs['last_name'] ), type='text', name='contact[last_name]', spellcheck='false', required data-required-msg= input_errs['last_name'], placeholder='Last name', value= contact['last_name'], maxlength=255 )

          div(class='label padding-top-offset20')
            +check_err(input_errs['email'])
            label(for='contact_email') Email Address
            span(class='req') *
          input(id='contact_email', class= locals.form_helpers.class_selector( locals.notifications, input_errs['email'] ), type='email', name='contact[email]', required data-required-msg= input_errs['email'], placeholder='example@domain.com', value= contact['email'], maxlength=255 )

          //- If we ever use this field again, we must first update it to new
          //- template vars!
          //-
          //- br
          //- +check_err(input_errs['confirm_email'])
          //- label(for='contact_confirm_email') Confirm Email
          //- span(class='req') *
          //- br
          //- if notifications != null && notifications.type === 'err' && post_data.email != ''
          //-   input(id='contact_confirm_email', class='', type='email', name='confirm_email', required data-required-msg=input_errs['confirm_email'], value=post_data.email )
          //- else
          //-   input(id='contact_confirm_email', class='', type='email', name='confirm_email', required data-required-msg=input_errs['confirm_email'], placeholder='example@domain.com' )

          div(class='label padding-top-offset20')
            +check_err(input_errs['phone_area'])
            +check_err(input_errs['phone_prefix'])
            +check_err(input_errs['phone_suffix'])
            //- +check_err(input_errs['phone_ext'])
            label(for='phone_area') Phone Number

            // Pass validation hack (shame on me!)
            label(for='phone_prefix', hidden=true)
            label(for='phone_suffix', hidden=true)
            //- label(for='phone_ext', hidden=true)
            span(class='req') *

          //- div(class='note') (extension is optional)
          |  (
          input(id='phone_area', class= locals.form_helpers.class_selector( locals.notifications, input_errs['phone_area'] ), type='tel', name='contact[phone_area]', maxlength=3, required data-required-msg= input_errs['phone_area'], placeholder='479', value= contact['phone_area'] )
          |  )
          input(id='phone_prefix', class= locals.form_helpers.class_selector( locals.notifications, input_errs['phone_prefix'] ), type='tel', name='contact[phone_prefix]', maxlength=3, required data-required-msg= input_errs['phone_prefix'], placeholder='555', value= contact['phone_prefix'] )
          |  -
          input(id='phone_suffix', class= locals.form_helpers.class_selector( locals.notifications, input_errs['phone_suffix'] ), type='tel', name='contact[phone_suffix]', maxlength=4, required data-required-msg= input_errs['phone_suffix'], placeholder='1244', value= contact['phone_suffix'] )
          //- input(id='phone_ext', class= locals.form_helpers.class_selector( locals.notifications, input_errs['phone_ext'] ), type='tel', name='contact[phone_ext]', maxlength=10, required data-required-msg= input_errs['phone_ext'], placeholder='Ext', value= contact['phone_ext'] )

          //- div(class='label padding-top-offset20')
            +check_err(input_errs['state'])
            label(for='contact_state') State
            span(class='req') *
          //- select(id='contact_state', class= locals.form_helpers.class_selector( locals.notifications, input_errs['state'] ), name='contact[state]', required data-required-msg= input_errs['state'] )
            +select_option('Select State', contact['state'] )
            +select_option('Alabama', contact['state'] )
            +select_option('Alaska', contact['state'] )
            +select_option('Arizona', contact['state'] )
            +select_option('Arkansas', contact['state'] )
            +select_option('California', contact['state'] )
            +select_option('Colorado', contact['state'] )
            +select_option('Connecticut', contact['state'] )
            +select_option('Delaware', contact['state'] )
            +select_option('Florida', contact['state'] )
            +select_option('Georgia', contact['state'] )
            +select_option('Hawaii', contact['state'] )
            +select_option('Idaho', contact['state'] )
            +select_option('Illinois', contact['state'] )
            +select_option('Indiana', contact['state'] )
            +select_option('Iowa', contact['state'] )
            +select_option('Kansas', contact['state'] )
            +select_option('Kentucky', contact['state'] )
            +select_option('Louisiana', contact['state'] )
            +select_option('Maine', contact['state'] )
            +select_option('Maryland', contact['state'] )
            +select_option('Massachusetts', contact['state'] )
            +select_option('Michigan', contact['state'] )
            +select_option('Minnesota', contact['state'] )
            +select_option('Mississippi', contact['state'] )
            +select_option('Missouri', contact['state'] )
            +select_option('Montana', contact['state'] )
            +select_option('Nebraska', contact['state'] )
            +select_option('Nevada', contact['state'] )
            +select_option('New Hampshire', contact['state'] )
            +select_option('New Jersey', contact['state'] )
            +select_option('New Mexico', contact['state'] )
            +select_option('New York', contact['state'] )
            +select_option('North Carolina', contact['state'] )
            +select_option('North Dakota', contact['state'] )
            +select_option('Ohio', contact['state'] )
            +select_option('Oklahoma', contact['state'] )
            +select_option('Oregon', contact['state'] )
            +select_option('Pennsylvania', contact['state'] )
            +select_option('Puerto Rico', contact['state'] )
            +select_option('Rhode Island', contact['state'] )
            +select_option('South Carolina', contact['state'] )
            +select_option('South Dakota', contact['state'] )
            +select_option('Tennessee', contact['state'] )
            +select_option('Texas', contact['state'] )
            +select_option('Utah', contact['state'] )
            +select_option('Vermont', contact['state'] )
            +select_option('Virginia', contact['state'] )
            +select_option('Washington', contact['state'] )
            +select_option('Washington DC', contact['state'] )
            +select_option('West Virginia', contact['state'] )
            +select_option('Wisconsin', contact['state'] )
            +select_option('Wyoming', contact['state'] )

          //- div(class='label padding-top-offset20')
            +check_err(input_errs['zipcode'])
            label(for='contact_zipcode') Postal Code
            span(class='req') *
          //- Yes, 'tel' type is not a typo; a) 'number' type does not bring
          //- up the numbers-only keypad under Mobile Safari (iOS); b) Google
          //- Chrome erases our input upon submission if non-numeric input is
          //- entered.
          //- input(id='contact_zipcode', class= locals.form_helpers.class_selector( locals.notifications, input_errs['zipcode'] ), type='tel', name='contact[zipcode]', maxlength=5, required data-required-msg= input_errs['zipcode'], placeholder='72735', value= contact['zipcode'] )

      fieldset
        legend Your Contact Preference

        div(class='label')
          +check_err(input_errs['pref'])
          label(for='pref') How would you like to be contacted?
          span(class='req') *
        select(id='pref', class= locals.form_helpers.class_selector( locals.notifications, input_errs['pref'] ), name='contact[pref]', required data-required-msg= input_errs['pref'] )
          +select_option('Select Preference', contact['pref'] )
          +select_option('Email', contact['pref'] )
          +select_option('Phone', contact['pref'] )

      fieldset
        legend Your Inquiry

        div(class='label')
          +check_err(input_errs['message'])
          label(for='contact_message') Brief description of your legal issue
          span(class='req') *
        textarea(id='contact_message', class= locals.form_helpers.class_selector( locals.notifications, input_errs['message'] ), name='contact[message]', spellcheck='true', required data-required-msg= input_errs['message'],maxlength=4096 )= contact['message']

      fieldset
        legend Legal Disclaimer

        include email_disclaimer

        +check_err(input_errs['tos'])
        input(id='tos', class= locals.form_helpers.class_selector( locals.notifications, input_errs['last_name'] ), type='checkbox', name='contact[tos]', value='agree', required data-required-msg= input_errs['tos'], checked= contact['tos'] )

        label(for='tos') I have read the disclaimer.
        span(class='req') *

      button(class='orange-button border-rounded margin-top-offset25 margin-bottom-offset25', type='submit', name='action', value='send_msg') Send Message

      //- script.
      //-   // http://modernizr.com/docs/
      //-   Modernizr.load([
      //-     // Functional polyfills
      //-     {
      //-       test : Modernizr.placeholder,
      //-       // HTML5 Placeholder Attribute Polyfill (IE-only Behavior)
      //-       // https://github.com/UmbraEngineering/Placeholder
      //-       nope : '/js/ie-behavior.js',
      //-       complete : function () {
      //-         // ...
      //-       }
      //-     }
      //-   ]);

    //- FIXME:
    //- script.
    //-   var elem = document.getElementById("contact_confirm_email");
    //-   elem.addEventListener("blur", verify_email);
    //-   function verify_email(input) {
    //-     input = input.srcElement;
    //-     console.log( input.value);
    //-     console.log( document.getElementById('contact_email').value );
    //-     if (input.value != document.getElementById('contact_email').value) {
    //-       // the provided value does *not* match the primary email address
    //-       input.setCustomValidity('Your e-mail address does not match.');
    //-     } else {
    //-       // input is valid -- reset the error message
    //-       input.setCustomValidity('');
    //-     }
    //-   }

block footer
